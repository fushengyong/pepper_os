jobs:
  - job: "build_pepper_os_1"
    timeoutInMinutes: 0

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: pepper_os_image

    steps:
    - script: docker system prune -a -f
      displayName: 'clear disk space'
    # As we run into HD space problems and we have 7GB RAM available
    - script: sudo mkdir /mnt/ramdisk && sudo mount -t tmpfs -o rw,size=3G tmpfs /mnt/ramdisk
      displayName: 'create RAM disk for download'
    - script: docker build --network host -f Dockerfile -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
      displayName: 'docker build'
      # This means up to 6h
      timeoutInMinutes: 0
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'
      condition: always()
      # Even if it fails I want to push the image to DockerHub for inspection
    # The variables are set on the Build options on the web interface
    # # Try to tag the latest failed image we ran
    - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'create image to push to DockerHub'
      condition: failed()

    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'push image to DockerHub'
      condition: always()
    # Tag as :latest too
    - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'tag as latest'
      # condition: always()
    # Push as latest
    - script: docker push $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'push latest to DockerHub'
      # condition: always()

 
  - job: package_stage
    timeoutInMinutes: 0
    dependsOn: "build_pepper_os_1"

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: pepper_os_image_package_stage
      platform: x86
      rosdistro: ros-kinetic

    steps:
    - script: df -h && df && cat /proc/meminfo && docker system prune -a -f && df -h && df
      displayName: 'Check disk space and RAM and docker cleanup'

    - script: docker build -f Dockerfile.package -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
      displayName: 'docker build package_stage'
      # This means up to 6h
      timeoutInMinutes: 0
    # The variables are set on the Build options on the web interface
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'
      condition: always()
      # Even if it fails I want to push the image to DockerHub for inspection
    - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'create image to push to DockerHub'
      condition: failed()
    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'push image to DockerHub'
      condition: always()
    # Tag as :latest too
    - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'tag as latest'
      # condition: always()
    # Push as latest
    - script: docker push $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'push latest to DockerHub'
      # condition: always()

    # Create a temporal container to copy the pepper_os.tar.gz
    - script: |
        id=$(docker create $(DockerHub_user)/$(docker_image_name))
        docker cp $id:/tmp/pepper_os.tar.lzma $HOME
      displayName: 'Extract pepper_os.tar.lzma from Docker image'
    # Not really needed
    # - script: docker rm -v $id
    # Make a release
    - script: python -m pip install --upgrade pip setuptools wheel
      displayName: 'Install tools'
    - script: python -m pip install --user githubrelease
      displayName: 'Install tools 2'
    - script: |
        export DATE=$(date -I'minutes' | sed 's/+/plus/g'| sed 's/:/at/g')
        export RELEASE_TAG=release/${DATE}
        export RELEASE_FILE_NAME=pepper_os_$(rosdistro)-${PLATFORM}_${DATE}.tar.lzma
        export RELEASE_NAME="Pepper OS based on Gentoo Prefix and ROS Kinetic"
        export BODY="Extract with: cat ${RELEASE_FILE_NAME}.part-* > ${RELEASE_FILE_NAME}; tar xvf pepper_os*.tar.lzma; ./gentoo/startprefix"
        mv $HOME/pepper_os.tar.lzma ${RELEASE_FILE_NAME}
        docker system prune -a -f
        split -b 1024MB -d ${RELEASE_FILE_NAME} ${RELEASE_FILE_NAME}.part-
        rm ${RELEASE_FILE_NAME}
        export PATH=$HOME/.local/bin:$PATH
        export PYTHONPATH=$HOME/.local/lib/python2.7/site-packages:$PYTHONPATH
        githubrelease --github-token $(GitHub_Token) release $(Build.Repository.Name) create "${RELEASE_TAG}" --publish --name "${RELEASE_NAME}" --body "${BODY}" "${RELEASE_FILE_NAME}.part-*"
      displayName: 'Create Release'


  # - job: "build_pepper_os_from_previous_state_1"
  #   timeoutInMinutes: 0

  #   pool:
  #     vmImage: 'Ubuntu 16.04'

  #   variables:
  #     docker_image_name: pepper_os_image_from_previous

  #   steps:
  #   - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
  #     displayName: 'docker login'
  #   - script: docker pull $(DockerHub_user)/pepper_os_image_from_previous
  #     displayName: 'pull previous built image'
  #   # We divide the boostrap in 3 parts to not go over the 6h limit as gcc takes ages
  #   - script: docker build --network host -f Dockerfile --cache-from $(DockerHub_user)/pepper_os_image_from_previous -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
  #     displayName: 'docker build'
  #     # This means up to 6h
  #     timeoutInMinutes: 0
  #     # Even if it fails I want to push the image to DockerHub for inspection
  #   # The variables are set on the Build options on the web interface
  #   # # Try to tag the latest failed image we ran
  #   - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
  #     displayName: 'create image to push to DockerHub'
  #     condition: failed()

  #   # Push it
  #   - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
  #     displayName: 'push image to DockerHub'
  #     condition: always()
  #   # Tag as :latest too
  #   - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
  #     displayName: 'tag as latest'
  #     # condition: always()
  #   # Push as latest
  #   - script: docker push $(DockerHub_user)/$(docker_image_name):latest
  #     displayName: 'push latest to DockerHub'
  #     # condition: always()

  # - job: package_stage_from_previous
  #   timeoutInMinutes: 0
  #   dependsOn: "build_pepper_os_from_previous_state_1"

  #   pool:
  #     vmImage: 'Ubuntu 16.04'

  #   variables:
  #     docker_image_name: pepper_os_image_package_stage_from_previous
  #     platform: x86
  #     rosdistro: ros-kinetic

  #   steps:
  #   # The variables are set on the Build options on the web interface
  #   - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
  #     displayName: 'docker login'

  #   - script: docker build -f Dockerfile.package_from_previous -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
  #     displayName: 'docker build package_stage'
  #     # This means up to 6h
  #     timeoutInMinutes: 0
  #     # Even if it fails I want to push the image to DockerHub for inspection
  #   - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
  #     displayName: 'create image to push to DockerHub'
  #     condition: failed()
  #   # Push it
  #   - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
  #     displayName: 'push image to DockerHub'
  #     condition: always()
  #   # Tag as :latest too
  #   - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
  #     displayName: 'tag as latest'
  #     condition: always()
  #   # Push as latest
  #   - script: docker push $(DockerHub_user)/$(docker_image_name):latest
  #     displayName: 'push latest to DockerHub'
  #     condition: always()

  #   # Create a temporal container to copy the pepper_os.tar.gz
  #   - script: |
  #       id=$(docker create $(DockerHub_user)/$(docker_image_name))
  #       docker cp $id:/tmp/pepper_os.tar.gz $HOME
  #     displayName: 'Extract pepper_os.tar.gz from Docker image'
  #   # Not really needed
  #   # - script: docker rm -v $id
  #   # Make a release
  #   - script: python -m pip install --upgrade pip setuptools wheel
  #     displayName: 'Install tools'
  #   - script: python -m pip install --user githubrelease
  #     displayName: 'Install tools 2'
  #   - script: |
  #       export DATE=$(date -I'minutes' | sed 's/+/plus/g'| sed 's/:/at/g')
  #       export RELEASE_TAG=release/${DATE}
  #       export RELEASE_FILE_NAME=pepper_os_$(rosdistro)-${PLATFORM}_${DATE}_not_full_rebuild.tar.gz
  #       export RELEASE_NAME="Pepper OS based on Gentoo Prefix and ROS (not full rebuild)"
  #       export BODY="Extract with: cat ${RELEASE_FILE_NAME}.part-* > ${RELEASE_FILE_NAME}; tar xvf pepper_os*.tar.gz; ./gentoo/startprefix"
  #       mv $HOME/pepper_os.tar.gz ${RELEASE_FILE_NAME}
  #       split -b 1024MB -d ${RELEASE_FILE_NAME} ${RELEASE_FILE_NAME}.part-
  #       rm ${RELEASE_FILE_NAME}
  #       export PATH=$HOME/.local/bin:$PATH
  #       export PYTHONPATH=$HOME/.local/lib/python2.7/site-packages:$PYTHONPATH
  #       githubrelease --github-token $(GitHub_Token) release $(Build.Repository.Name) create "${RELEASE_TAG}" --publish --name "${RELEASE_NAME}" --body "${BODY}" "${RELEASE_FILE_NAME}.part-*"
  #     displayName: 'Create Release'
